{"version":3,"sources":["bootstrap-components/MyNavbar.js","AgileChecklist.js","bootstrap-components/MyRegisLoginForm.js","LandingPage.js","serviceWorker.js","index.js","App.js"],"names":["MyNavbar","Navbar","bg","expand","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Component","AgileChecklist","props","handleChange","event","target","checked","p","state","user_checklist","setState","user","console","log","JSON","stringify","bind","practices","axios","get","process","this","match","params","then","res","data","catch","error","map","item","Form","Check","type","key","_id","slug","label","title","onChange","checklistMapping","MyRegisLoginForm","onChangeUsername","onChangeSecretcode","onSubmit","username","secretcode","checklist","e","value","preventDefault","post","window","location","Group","controlId","Label","Control","placeholder","name","Text","Button","LandingPage","Row","Col","md","Boolean","hostname","ReactDOM","render","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa364bea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport Container from \"react-bootstrap/Container\";\n\nexport default class MyNavbar extends Component  {\n    render () {\n        return (\n            <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n                <Container>\n                    <Navbar.Brand href=\"#home\">My Agile Checklist - Tiga Pilar Agile</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"ml-auto\">\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport axios from 'axios';\n\nimport { Form } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n\nclass AgileChecklist extends Component {\n\n    constructor(props) {\n        super(props);\n    \n        this.handleChange = this.handleChange.bind(this)\n    \n        this.state = {practices: [], user: null, user_checklist: []};\n      }\n\n    componentDidMount() {\n        axios.get(process.env.REACT_APP_API_URL+'/userid/'+this.props.match.params.id)\n          .then(res => {\n            this.setState( res.data )\n          })\n          .catch((error) => {\n            console.log(error);\n          })\n      }\n\n    checklistMapping() {\n        return this.state.practices.map(item => {\n            return <Form.Check \n                        type='checkbox'\n                        key={item._id}\n                        id={item.slug}\n                        label={item.title}\n                        onChange={this.handleChange}\n                    />;\n          })\n    }\n\n    render(){\n        return (\n            <Form>\n                <div key={`default-checkbox`} className=\"mb-3\">\n                { this.checklistMapping() }\n                </div>\n            </Form>\n        )\n    }\n\n    handleChange = event => {\n        \n        const { id, checked } = event.target        \n        let p = this.state.user_checklist; \n        p[[id]] = checked;\n        this.setState({\n            user_checklist: p\n        })\n        let data = {\n            user: this.state.user,\n            checklist: p\n        }\n        console.log(JSON.stringify(p))\n/*        \n        axios.post(process.env.REACT_APP_API_URL+'/api/users/checklist-update', data)\n            .then(res => {\n                console.log(res)\n                //window.location = '/userid/'+res.data._id;\n            });\n\n        //let temp_checklist = this.state.user_checklist.push([{ [id]: checked }])\n        //console.log(temp_checklist.toString);\n        /*\n        this.setState({\n            user_checklist: this.state.user_checklist.push([{ [id]: checked }]),\n        })*/\n    }\n}\n\nexport default AgileChecklist","import React, { Component } from \"react\";\nimport axios from 'axios';\n\nimport { Form, Button } from \"react-bootstrap\";\n\nexport default class MyRegisLoginForm extends Component  {\n\n    constructor(props){\n        \n        super(props)\n\n        this.onChangeUsername = this.onChangeUsername.bind(this);\n        this.onChangeSecretcode = this.onChangeSecretcode.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n        this.state = {\n            username : '',\n            secretcode: '',\n            checklist: []\n        }\n\n    }\n\n    onChangeUsername(e){\n        this.setState({\n            username: e.target.value\n        })\n    }\n\n    onChangeSecretcode(e){\n        this.setState({\n            secretcode: e.target.value\n        })\n    }\n\n    onSubmit(e){\n        e.preventDefault();\n\n        const user = {\n            username: this.state.username,\n            secretcode: this.state.secretcode,\n            checklist: []\n        }\n\n        axios.post(process.env.REACT_APP_API_URL+'/api/users/enter', user)\n            .then(res => {\n                window.location = '/userid/'+res.data._id;\n            });\n    }\n\n    render () {\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Alamat email</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"Masukkan alamat email Gmail\" name=\"username\" value={this.state.username} onChange={this.onChangeUsername}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Kode Rahasia</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"Masukan Kode Rahasia -- bukan password\" name=\"secretcode\" value={this.state.secretcode} onChange={this.onChangeSecretcode} />\n                    <Form.Text className=\"text-muted\">\n                        Jangan masukkan password biasa kamu. Masukkan kode rahasia baru yang mudah kamu ingat. \n                    </Form.Text>\n                </Form.Group>\n\n                <Button variant=\"primary\" type=\"submit\">\n                    Register / Login\n                </Button>\n            </Form>\n        )\n    }\n}","import React, { Component } from \"react\";\n\nimport { Row, Col } from \"react-bootstrap\";\n\nimport MyRegisLoginForm from \"./bootstrap-components/MyRegisLoginForm\"\n\nexport default class LandingPage extends Component  {\n    render(){\n        return(\n            <Row>\n                <Col>\n                    <h2>Konsultan Agile Digital</h2>\n                    <p>\n                        Di sini, kamu bisa menilai ketangkasan organisasi kamu sendiri &amp; mendapatkan saran yang sesuai. Informasi tersimpan agar bisa dinilai/dibaca lagi minggu depan.\n                    </p>\n                    <p>\n                        Hati-hati, jangan mendaftar dengan password biasa kamu. Karena versi MVP (minimum viable product) ini masih pakai 'secret code' untuk sementara. Backlog item setelah ini adalah <code>oAuth dengan akun Google</code>.\n                    </p>\n                    <hr/>\n                </Col>\n                <Col md={5}>\n                    <MyRegisLoginForm/>\n                </Col>\n            </Row>\n        )\n    }    \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport MyNavbar from \"./bootstrap-components/MyNavbar\"\nimport Container from \"react-bootstrap/Container\";\n\nimport AgileChecklist from \"./AgileChecklist\"\nimport LandingPage from \"./LandingPage\";\n\nexport default () => (\n  <Router>\n    <MyNavbar />\n    <Container className=\"py-5\">\n      <Route path=\"/\" exact component={LandingPage} />\n      <Route path=\"/userid/:id\" component={AgileChecklist} />\n    </Container>\n  </Router>\n);"],"sourceRoot":""}
{"version":3,"sources":["bootstrap-components/MyNavbar.js","AgileChecklist.js","bootstrap-components/MyRegistrationForm.js","serviceWorker.js","index.js","App.js"],"names":["MyNavbar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Component","AgileChecklist","handleChange","event","target","checked","console","log","Form","key","Check","type","label","onChange","this","MyRegistrationForm","props","onChangeUsername","bind","onChangeSecretcode","onSubmit","state","username","secretcode","checklist","e","setState","value","preventDefault","user","axios","post","process","then","res","data","window","location","Group","controlId","Label","Control","placeholder","name","Text","Button","variant","Boolean","hostname","match","ReactDOM","render","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1cde1f50.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport Container from \"react-bootstrap/Container\";\n\nclass MyNavbar extends Component  {\n    render () {\n        return (\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Container>\n                    <Navbar.Brand href=\"#home\">My Agile Checklist</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"ml-auto\">\n                            <Nav.Link href=\"#home\">Home</Nav.Link>\n                            <Nav.Link href=\"#login\">Login dengan Google</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        )\n    }\n}\n\nexport default MyNavbar","import React, { Component } from \"react\";\n\nimport { Form } from \"react-bootstrap\";\n\nclass AgileChecklist extends Component {\n    render(){\n        return (\n            <Form>\n                <div key={`default-checkbox`} className=\"mb-3\">\n                <Form.Check \n                    type='checkbox'\n                    id={`default-checkbox`}\n                    label={`default checkbox`}\n                    onChange={this.handleChange}\n                />\n                </div>\n            </Form>\n        )\n    }\n\n    handleChange = event => {\n        const { id, checked } = event.target\n        console.log({ [id]: checked })\n        /*\n        const { name, value } = event.target\n    \n        this.setState({\n            [name]: value,\n        }) */\n    }\n}\n\nexport default AgileChecklist","import React, { Component } from \"react\";\nimport axios from 'axios';\n\nimport { Form, Button } from \"react-bootstrap\";\n\nexport default class MyRegistrationForm extends Component  {\n\n    constructor(props){\n        \n        super(props)\n\n        this.onChangeUsername = this.onChangeUsername.bind(this);\n        this.onChangeSecretcode = this.onChangeSecretcode.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n        this.state = {\n            username : '',\n            secretcode: '',\n            checklist: []\n        }\n\n    }\n\n    onChangeUsername(e){\n        this.setState({\n            username: e.target.value\n        })\n    }\n\n    onChangeSecretcode(e){\n        this.setState({\n            secretcode: e.target.value\n        })\n    }\n\n    onSubmit(e){\n        e.preventDefault();\n\n        const user = {\n            username: this.state.username,\n            secretcode: this.state.secretcode,\n            checklist: []\n        }\n\n        axios.post(process.env.REACT_APP_API_URL+'/api/users/add', user)\n            .then(res => console.log(res.data));\n\n        window.location = '/';\n    }\n\n    render () {\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"username\" value={this.state.username} onChange={this.onChangeUsername}/>\n                    <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Kode Rahasia</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"Masukan Kode Rahasia -- bukan password\" name=\"secretcode\" value={this.state.secretcode} onChange={this.onChangeSecretcode} />\n                </Form.Group>\n                <Form.Group controlId=\"formBasicCheckbox\">\n                    <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">\n                    Register\n                </Button>\n            </Form>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport MyNavbar from \"./bootstrap-components/MyNavbar\"\nimport Container from \"react-bootstrap/Container\";\n\nimport AgileChecklist from \"./AgileChecklist\"\nimport Form from \"./bootstrap-components/MyRegistrationForm\"\n\nexport default () => (\n  <Router>\n    <MyNavbar />\n    <Container className=\"p-3\">\n      <Route path=\"/\" exact component={Form} />\n      <Route path=\"/username/:username/secretcode/:secretcode\" component={AgileChecklist} />\n    </Container>\n  </Router>\n);"],"sourceRoot":""}